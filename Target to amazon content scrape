#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jun 24 09:39:16 2019

@author: z003b4w
"""

from lxml import html
import requests
import pandas as pd
import numpy as np 
from urllib.request import Request, urlopen
from bs4 import BeautifulSoup
from contextlib import suppress
from time import sleep
from random import randint
from time import time
import requests
from lxml.html import fromstring


#The excel file below contains brand name and link to that brand name store on Amazon
q= 'http://api.scraperapi.com'


Amazon_link_list=[]
product_link_list=[]
product_price_list=[]
product_seller1_list=[]
product_reviews_list=[]
product_ratings_list=[]
product_images1_list=[]
product_videos_list=[]
product_bullet_final_list=[]
product_description1_list=[]
product_comparison1_list=[]
product_qa1_list=[]
product_title_list=[]

import pandas as pd
xlsx1=pd.ExcelFile("/Users/z003b4w/Desktop/2019_05_Low Converting Items.xlsx")
df = xlsx1.parse("Top 50 Visited Low Conversion")
links=df["title"]
links2=links[0:10000]
links2[1]

for i in range(len(links2)):
    prod_name= links2[i]
    #prod_name
    links1="https://www.amazon.com/s?k="+prod_name
    print(links1)
    #links1="https://www.amazon.com/s?k=Case-Mate+iPhone+Xs+Max+Brilliance+Rose+Gold&ref=nb_sb_noss_2"
    
    
    payload = {'key': 'e0a42cf476b6ac88254a90bd4d89fa7c', 'url':links1, 'us_only': 'true'}
    page = requests.get(q,params=payload,timeout=200)
    print(page)
    sleep(randint(10,15))
    contents = page.content     
    #print(contents)
    soup = BeautifulSoup(contents, "lxml")
    #soup.prettify()
            
    ########################################################################################
    try:
            
        f=soup.find('div', attrs={'class': 'sg-col-4-of-24 sg-col-4-of-12 sg-col-4-of-36 s-result-item sg-col-4-of-28 sg-col-4-of-16 sg-col sg-col-4-of-20 sg-col-4-of-32'})
        asin=f['data-asin']
        product_link="www.amazon.com/dp/"+ asin
    
    
    #####################################################        
        payload = {'key': 'e0a42cf476b6ac88254a90bd4d89fa7c', 'url':product_link, 'us_only': 'true'}
        product_page = requests.get(q,params=payload,timeout=200)
        print(page)
        sleep(randint(10,15))
        product_contents = product_page.content     
        #print(contents)
        soup1 = BeautifulSoup(product_contents, "lxml")
        soup1.prettify()
    except AttributeError:
        soup1="Not Found"
        
    ####################################################
    try:
        product_title=soup1.find('span', attrs={'id': 'productTitle'})
        product_title=product_title.text
    except AttributeError:
        product_title="Not Found"
    
    
    
    
    try:
        product_price=soup1.find('span', attrs={'class': 'a-size-medium a-color-price priceBlockBuyingPriceString'})
        product_price=product_price.text
    except AttributeError:
        product_price="Not Found"
    ###################################################
    
    try:
        product_seller=soup1.find('div', attrs={'id': 'merchant-info'})
        product_seller=product_seller.text
        product_seller1=product_seller.replace('\n', '')
    except AttributeError:
        product_seller1="Not Found"
    
    
    ####################################################
    try:
        product_reviews=soup1.find('h2', attrs={'data-hook': 'total-review-count'})
        product_reviews=product_reviews.text
    except AttributeError:
        product_reviews="Not Found"
        
    ####################################################
    try:
        product_ratings=soup1.find('span', attrs={'data-hook': 'rating-out-of-text'})
        product_ratings=product_ratings.text
    except AttributeError:
        product_ratings="Not Found"
        
    ####################################################
    try:
        product_images1=len(soup1.find_all('li', attrs={'class': 'a-spacing-small item'}))
        product_images1
    except AttributeError:
        product_images1="Not Found"
        
    try:            
        product_videos=len(soup1.find_all('li', attrs={'class': 'a-spacing-small item videoBlockIngress videoBlockDarkIngress'}))
        product_videos
    except AttributeError:
        product_videos="Not Found"
        
    
    ####################################################
    try:            
        product_bullet=soup1.find('ul', attrs={'class': 'a-unordered-list a-vertical a-spacing-none'})
        product_bullet1=product_bullet.text
        product_bullet1
    except AttributeError:
        product_bullet1="Not Found"
        
    try:
        product_bullet_final=product_bullet1.replace('\n', '')
        product_bullet_final=product_bullet_final.replace('\t', '')
        product_bullet_final
    except AttributeError:
        product_bullet_final="Not Found"
    
    ###################################################
    try:            
        product_description=soup1.find('div', attrs={'id': 'productDescription'})
        product_description=product_description.text
        product_description1=product_description.replace('\n', '')
        print(product_description1)
    except AttributeError:
        product_description1="Not Found"
    
    ###################################################
    try:        
        product_comparison=soup1.find('h2', attrs={'id': 'comparison_table_title'})
        product_comparison
        product_comparison=product_comparison.text
        product_comparison1=product_comparison.replace('\n', '')
        print(product_comparison1)
    except AttributeError:
        product_comparison1="Not Found"
    
    ###################################################
    try: 
        product_qa=soup1.find('a', attrs={'id': 'askATFLink'})
        product_qa=product_qa.text
        product_qa1=product_qa.replace('\n', '')
    except AttributeError:
        product_qa1="Not Found"
        
        
    
    Amazon_link_list.append(links1)
    product_link_list.append(product_link)
    product_price_list.append(product_price)
    product_seller1_list.append(product_seller1)
    product_reviews_list.append(product_reviews)
    product_ratings_list.append(product_ratings)
    product_images1_list.append(product_images1)
    product_videos_list.append(product_videos)
    product_bullet_final_list.append(product_bullet_final)
    product_description1_list.append(product_description1)
    product_comparison1_list.append(product_comparison1)
    product_qa1_list.append(product_qa1)
    product_title_list.append(product_title)
    ####################################################
    
df_product_performance = pd.DataFrame({'Amazon listing page link':Amazon_link_list, 'Product_link':product_link_list, 'Product title':product_title_list,'Product Price':product_price_list,'Product seller': product_seller1_list, 'Product reviews':product_reviews_list, 'Product Ratings':product_ratings_list,'Product Images':product_images1_list,'Product Videos': product_videos_list, 'Product bullets':product_bullet_final_list, 'Product description':product_description1_list, 'Product Comparison':product_comparison1_list,'Product QA':product_qa1_list})
df_product_performance

writer = pd.ExcelWriter('Product Performance2.xlsx', engine='xlsxwriter',options={'strings_to_urls': False})
df_product_performance.to_excel(writer, sheet_name='Amazon product performance')
writer.save()
